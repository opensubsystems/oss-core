# All these properties are extensively documented at
# http://www.opensubsystems.org/userguide/configuration.html

################################################################################
# Configuration
################################################################################

# This property file has no other property file it depends on, if there would be 
# one, then settings here would override settings in that file 
#oss.config.dependent.file

################################################################################
# File system
################################################################################
#oss.file.path.temp
#oss.filecommit.retrycount

################################################################################
# Business Logic
################################################################################

# The following setting specifies which business logic manager is the one the  
# code should be using. Only one of the following settings can be uncommented. 
# The default business logic manages specified in the code when running inside  
# of application server is the J2EE otherwise it is the POJO one since it is 
# very lightweight and fast.  
###
# POJO - Alternative controller manager constructing controllers as POJOs
#org.opensubsystems.core.logic.ControllerManager = org.opensubsystems.core.logic.ControllerManager

################################################################################
# Database 
################################################################################
#oss.dbschema.prefix
#oss.dbaccess.admindatasource

# The following setting specifies which dbms is the default system which the 
# code should be using. Only one of the following settings can be uncommented.
# The default dbms specified in the code is HSQLDB since it is pure Java database
# that can be easily bundled with application.
# Only of of these settings should be uncommented
#org.opensubsystems.core.persist.db.Database=org.opensubsystems.core.persist.jdbc.database.hsqldb.HsqlDBDatabaseImpl
#org.opensubsystems.core.persist.db.Database=org.opensubsystems.core.persist.jdbc.database.mysql.MySQLDatabaseImpl
#org.opensubsystems.core.persist.db.Database=org.opensubsystems.core.persist.jdbc.database.postgresql.PostgreSQLDatabaseImpl

# At this time the supported dbms identifiers used in the settings described 
# below are:
# hsqldb, mysql, postgresql

# The following settings specify how should the database code behave. 
# The default values for each dbms are specified in the code, but they can be 
# overridden here for all dbms using the settings below. Notice that the setting
# names do not contain any dbms identifier, that is why they apply to all dbms. 
# You can also use the settings in the form 
# oss.database.[dbms identifier].... 
# for example 
# oss.database.oracle.rangesupport 
# to override the behavior for only the particular dbms. 
### 
#oss.database.absolutepositioningsupport
#oss.database.batchsize
#oss.database.connectionteststatement
#oss.database.prefercounttolast
#oss.database.rangesupport
#oss.database.selectlist.resultsetconcurrency
#oss.database.selectlist.resultsettype

# The following settings specify how to connect to the database. The default 
# values are specified in the code but then can be overridden here for all
# datasources using the settings below. Notice that the setting names do not
# contain any datasource or dbms identifier, that is why they apply to all
# datasources and all dbms.
# You can also use the settings in the form 
# oss.datasource.[dbms identifier].... 
# for example 
# oss.datasource.mysql.driver 
# to override the behavior for only the specified dbms or in the form 
# oss.datasource.[datasource identifier].... 
# for example 
# oss.datasource.mydatasource.driver
# to override the behavior for only the specified datasource. You can also 
# combine these two methods in the form 
# oss.datasource.[dbms identifier].[datasource identifier].... 
# for example 
# oss.datasource.mysql.mydatasource.driver
# to override the behavior for only the specified datasource when the specified
# dbms is used. These settings are used in the reversed order as described here
# with the last most descriptive method being used first.
###
#oss.datasource.driver
#oss.datasource.url
#oss.datasource.user
#oss.datasource.password
#oss.datasource.adminuser
#oss.datasource.adminpassword
#oss.datasource.transaction.isolation

# P6SpyDriver allows to monitor and log all JDBC database calls. If P6SpyDriver 
# is uncommented here, then you need to go to spy.properties to setup correct 
# driver. If the P6SpyDriver is commented here, the you select the proper database 
# driver here. MaxDB provides alternative way, how to capture trace using the 
# trace property without using P6Spy
#oss.datasource.driver=com.p6spy.engine.spy.P6SpyDriver

# These are the default settings when connecting to HSQLDB
###
oss.datasource.hsqldb.driver=org.hsqldb.jdbcDriver
oss.datasource.hsqldb.url=jdbc:hsqldb:data/hsqldb/OSSDATA
oss.datasource.hsqldb.user=basta
oss.datasource.hsqldb.password=fidli
oss.datasource.hsqldb.adminuser=sa
oss.datasource.hsqldb.adminpassword=

# These are the default settings when connecting to MySQL
###
oss.datasource.mysql.driver=com.mysql.jdbc.Driver
# Alternative driver
#oss.datasource.mysql.driver=org.gjt.mm.mysql.Driver
oss.datasource.mysql.url=jdbc:mysql://localhost/OSSDATA
oss.datasource.mysql.user=basta
oss.datasource.mysql.password=fidli
oss.datasource.mysql.adminuser=root
oss.datasource.mysql.adminpassword=password

# These are the default settings when connecting to PostgreSQL
###
oss.datasource.postgresql.driver=org.postgresql.Driver
oss.datasource.postgresql.url=jdbc:postgresql://localhost:5432/OSSDATA
oss.datasource.postgresql.user=basta
oss.datasource.postgresql.password=fidli
oss.datasource.postgresql.adminuser=postgres
oss.datasource.postgresql.adminpassword=password

################################################################################
# Connection pool
################################################################################

# The following setting specifies which database connection factory is the one 
# the  code should be using. Only one of the following settings can be uncommented. 
# The default connection pool specified in the code when running inside of 
# application server is the J2EE otherwise it is DBCP since it is widely popular, 
# supported and offer great flexibility.  
###
# NONE - No connection pooling will be used
#org.opensubsystems.core.persist.db.DatabaseConnectionFactory=org.opensubsystems.core.persist.jdbc.impl.DatabaseConnectionFactoryImpl
# DBCP - Connection pooling using Jakarta Commons DBCP connection pool
#org.opensubsystems.core.persist.db.DatabaseConnectionFactory=org.opensubsystems.core.persist.jdbc.connectionpool.DBCPDatabaseConnectionFactoryImpl
# J2EE - Connection pooling using J2EE connection pool
#org.opensubsystems.core.persist.db.DatabaseConnectionFactory=org.opensubsystems.core.persist.jdbc.connectionpool.J2EEDatabaseConnectionFactoryImpl

# The following settings specify how should a connection pool behave if one is 
# configured. The default values are specified in the code but then can be 
# overridden here for all # datasources using the settings below. Notice that 
# the setting names do not contain any datasource or dbms identifier, that is 
# why they apply to all datasources and all dbms.
# You can also use the settings in the form 
# oss.datasource.[dbms identifier].... 
# for example 
# oss.datasource.dbcp.maxsize 
# to override the behavior for only the specified dbms or in the form 
# oss.datasource.[datasource identifier].... 
# for example 
# oss.datasource.mydatasource.maxsize
# to override the behavior for only the specified datasource. You can also 
# combine these two methods in the form 
# oss.datasource.[dbms identifier].[datasource identifier].... 
# for example 
# oss.datasource.dbcp.mydatasource.maxsize
# to override the behavior for only the specified datasource when the specified
# dbms is used. These settings are used in the reversed order as described here
# with the last most descriptive method being used first.
###
#oss.datasource.pool.initialsize
#oss.datasource.pool.minsize
#oss.datasource.pool.maxsize
#oss.datasource.pool.cangrow
#oss.datasource.pool.waitperiod
#oss.datasource.pool.retryperiod
#oss.datasource.pool.retrycount
#oss.datasource.pool.validate.borrow
#oss.datasource.pool.validate.return
#oss.datasource.pool.validate.idle
#oss.datasource.pool.validate.level
#oss.datasource.pool.idlecheckperiod
#oss.datasource.pool.idlechecksize
#oss.datasource.pool.idleperiod
#oss.datasource.pool.pstmtcachesize

################################################################################
# Transactions
################################################################################

# The following setting specifies which transaction factory is the one the code 
# should be using. Only one of the following settings can be uncommented. The 
# default transaction factory specified in the code when running inside of 
# application server is the J2EE otherwise it is SimpleLocalTransactionFactoryImpl 
# since it is very lightweight and fast.  
###
# SimpleLocalTransactionFactory - Alternative transaction factory using OpenSubsystem optimized transaction factory
#org.opensubsystems.core.util.jta.TransactiontionFactory=org.opensubsystems.core.persist.jdbc.transaction.SimpleLocalTransactionFactoryImpl
# J2EE - Alternative transaction factory supporting transaction manager used by particular j2ee org.opensubsystems.core.util.jta.Transaction.TransactionFactory=org.opensubsystems.core.persist.jddbc.transaction.J2EETransactionFactoryImpl

#oss.transaction.timeout=600
#oss.transaction.monitor=false
