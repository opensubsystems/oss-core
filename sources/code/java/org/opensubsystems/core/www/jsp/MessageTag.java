/*
 * Copyright (C) 2003 - 2013 OpenSubsystems.com/net/org and its owners. All rights reserved.
 * 
 * This file is part of OpenSubsystems.
 *
 * OpenSubsystems is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 */
 
package org.opensubsystems.core.www.jsp;

import java.util.Iterator;
import java.util.List;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.TagSupport;

import org.opensubsystems.core.util.Messages;
import org.opensubsystems.core.util.jsp.TagUtils;

/**
 * Custom tag to display messages defined using call to 
 * CallContext.getInstance().getMessages().addXYZ() 
 * on the UI processed using servlet derived from WebUIServlet. Place this tag 
 * in your JSP page at the place where you want to display informational or error 
 * messages generated by application for the user. This tag will generate DIV 
 * element with informational and error messages in it that you can format using 
 * CSS. The default css classes for this tag are included in 
 * &lt;%=contextpath%&gt;/core/css/message.css. 
 * If you do not specify your own css styles, you should include this default 
 * css file whenever you use this tag.
 *  
 * @author bastafidli
 */
public class MessageTag extends TagSupport
{
   // Constants ////////////////////////////////////////////////////////////////

   /**
    * Messages collected during processing of current request.
    */
   public static final String MESSAGES_REQUEST_PARAM = "messages";
   
   // Attributes ///////////////////////////////////////////////////////////////
   
   /**
    * Generated serial version id for this class.
    */
   private static final long serialVersionUID = 9202964907351336679L;

   /**
    * Id of the DIV where messages will be displayed. Subarea where error 
    * messages are displayed will have id created by appending error and subarea 
    * for information messages will have id created by appending info. Required.
    */
   protected String m_strId; 
   
   /**
    * Class for the message labels.
    */
   protected String m_strCssclass;
   
   /**
    * Flag signaling to also include the message area if the area would be empty.
    * If the message area should be included even if it is empty this should say 
    * true or 1.
    */
   protected String m_strEmpty;

   // Constructors /////////////////////////////////////////////////////////////
   
   /**
    * Constructor for custom tag.
    */
   public MessageTag() 
   {
      super();
      
      m_strId = ""; 
      m_strCssclass = "clsMessages";
   }
   
   // Logic ////////////////////////////////////////////////////////////////////
   
   /**
    * {@inheritDoc}
    */
   @Override
   public int doStartTag(
   ) throws JspException 
   {
      Messages msgs = (Messages)pageContext.getRequest().getAttribute(
                          MessageTag.MESSAGES_REQUEST_PARAM);
      
      if ((msgs != null) || (isEmptyArea()))
      {                           
         List lstErrors = null;
         List lstInfos = null;
         boolean bErrors;
         boolean bInfo;
         
         if (msgs != null)
         {
            lstErrors = msgs.getAllErrorMessages();
            lstInfos = msgs.getInfoMessages();
         }
         bErrors = ((lstErrors != null) && (!lstErrors.isEmpty()));
         bInfo = ((lstInfos != null) && (!lstInfos.isEmpty()));

         if ((bErrors) || (bInfo) || (isEmptyArea()))
         {
            Iterator     iterator;
            String       strMessage;
            StringBuffer sbHtml;
            
            sbHtml = new StringBuffer();
            sbHtml.append("<div id=\"");
            sbHtml.append(m_strId);
            sbHtml.append("\"");
            if ((m_strCssclass != null) && (m_strCssclass.length() > 0))
            {
               sbHtml.append(" class=\"");
               sbHtml.append(m_strCssclass);
               if ((msgs == null) 
                  || (((lstErrors == null) || (lstErrors.isEmpty()))
                  && ((lstInfos == null) || (lstInfos.isEmpty()))))
               {
                  sbHtml.append("Empty");                  
               }
               sbHtml.append("\"");
            }
            sbHtml.append(">");

            if ((bErrors) || (isEmptyArea())) 
            {
               sbHtml.append("<div id=\"");
               sbHtml.append(m_strId);
               sbHtml.append("error\"");
               if ((m_strCssclass != null) && (m_strCssclass.length() > 0))
               {
                  sbHtml.append(" class=\"");
                  sbHtml.append(m_strCssclass);
                  sbHtml.append("Error\"");
               }
               sbHtml.append(">");
               
               if (lstErrors != null)
               {
                  for (iterator = lstErrors.iterator(); iterator.hasNext();)
                  {
                     strMessage = (String) iterator.next();
                     sbHtml.append("<div>");
                     sbHtml.append(strMessage);
                     sbHtml.append("</div>\n");               
                  }
               }
               
               sbHtml.append("</div>\n");
            }
            if ((bInfo) || (isEmptyArea()))
            {
               sbHtml.append("<div id=\"");
               sbHtml.append(m_strId);
               sbHtml.append("info\"");
               if ((m_strCssclass != null) && (m_strCssclass.length() > 0))
               {
                  sbHtml.append(" class=\"");
                  sbHtml.append(m_strCssclass);
                  sbHtml.append("Info\"");
               }
               sbHtml.append(">");
               
               if (lstInfos != null)
               {
                  for (iterator = lstInfos.iterator(); iterator.hasNext();)
                  {
                     strMessage = (String) iterator.next();
                     sbHtml.append("<div>");
                     sbHtml.append(strMessage);
                     sbHtml.append("</div>\n");               
                  }
               }
               
               sbHtml.append("</div>\n");
            }
            sbHtml.append("</div>\n");
            TagUtils.write(pageContext, sbHtml.toString());
         }
      }
      
      return (SKIP_BODY);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public int doEndTag(
   ) throws JspException 
   {
      return (EVAL_PAGE);
   }

   /**
    * @return String - Id of the DIV where messages will be displayed. Subarea
    *                  where error messages are displayed will have id created
    *                  by appending error and subarea for information messages 
    *                  will have id created by appending info.
    */
   @Override
   public String getId(
   )
   {
      return m_strId;
   }

   /**
    * @return String - CSS class for the area where messages are displayed. 
    *                  Subarea where error messages are displayed will have class 
    *                  created by appending Error and subarea for information 
    *                  messages will have class created by appending Info
    */
   public String getCssclass(
   )
   {
      return m_strCssclass;
   }

   /**
    * @param string - Id of the DIV where messages will be displayed. Subarea
    *                 where error messages are displayed will have id created
    *                 by appending error and subarea for information messages 
    *                 will have id created by appending info.
    */
   @Override
   public void setId(
      String string
   )
   {
      m_strId = string;
   }

   /**
    * @param string - CSS class for the area where messages are displayed. 
    *                  Subarea where error messages are displayed will have class 
    *                  created by appending Error and subarea for information 
    *                  messages will have class created by appending Info.
    */
   public void setCssclass(String string)
   {
      m_strCssclass = string;
   }

   /**
    * @return String - If the message area should be included even if it is empty 
    *                  this should say true or 1.
    */
   public String getEmpty(
   )
   {
      return m_strEmpty;
   }

   /**
    * @param strEmpty - If the message area should be included even if it is empty 
    *                  this should say true or 1.
    */
   public void setEmpty(
      String strEmpty
   )
   {
      m_strEmpty = strEmpty;
   }
   
   /**
    * @param bEmpty - If the message area should be included even if it is empty 
    *                 this should say true or 1.
    */
   public void setEmpty(
      boolean bEmpty
   )
   {
      m_strEmpty = Boolean.toString(bEmpty);
   }

   /**
    * @return boolean - true if the message area should be included even if empty
    */
   public boolean isEmptyArea(
   )
   {
      return ((Boolean.TRUE.toString().equalsIgnoreCase(m_strEmpty))
             || ("1".equals(m_strEmpty))); 
   }
}
