/*
 * Copyright (C) 2003 - 2014 OpenSubsystems.com/net/org and its owners. All rights reserved.
 * 
 * This file is part of OpenSubsystems.
 *
 * OpenSubsystems is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 */
  
package org.opensubsystems.core.error;

import org.opensubsystems.core.util.StringUtils;

/**
 * Base class for all custom exceptions created in this project. All custom 
 * exceptions should be derived from this base class so that it is easy to 
 * separate exception handling for exception generated by our code from 
 * exceptions from other 3rd party components, java, etc.
 * 
 * @author bastafidli
 */
public abstract class OSSException extends Exception
{
   // Attributes ///////////////////////////////////////////////////////////////
   
   /**
    * Generated serial version id for this class.
    */
   private static final long serialVersionUID = -8900160561205655014L;

   // Attributes //////////////////////////////////////////////////////////////
   
   /**
    * String identifying location in the structure of the application where the
    * error has occurred.
    */
   protected String m_strLocation;
   
   /**
    * Was the exception already recorded in the data store that captures the 
    * exception that occurred.
    */
   protected boolean m_bRecorded = false;
   
   // Constructors /////////////////////////////////////////////////////////////
   
   /**
    * Create new exception
    */
   public OSSException(
   )
   {
      super();
   }

   /**
    * Create new exception
    * 
    * @param strMessage - message to display
    */
   public OSSException(
      String strMessage
   )
   {
      super(strMessage);
   }

   /**
    * Create new exception
    * 
    * @param strLocation - location in the structure of the application where 
    *                      the error has occurred
    * @param strMessage - message to display
    */
   public OSSException(
      String strLocation,
      String strMessage
   )
   {
      super(strMessage);
      m_strLocation = strLocation;
   }

   /**
    * Create new exception
    * 
    * @param strMessage - message to display
    * @param cause - cause for error
    */
   public OSSException(
      String    strMessage, 
      Throwable cause
   )
   {
      super(strMessage, cause);
   }

   /**
    * Create new exception
    * 
    * @param strLocation - location in the structure of the application where 
    *                      the error has occurred
    * @param strMessage - message to display
    * @param cause - cause for error
    */
   public OSSException(
      String    strLocation,
      String    strMessage, 
      Throwable cause
   )
   {
      super(strMessage, cause);
      m_strLocation = strLocation;
   }

   /**
    * Create new exception
    * 
    * @param cause - cause for error
    */
   public OSSException(
      Throwable cause
   )
   {
      super(cause);
   }

   // Logic ////////////////////////////////////////////////////////////////////
   
   @Override
   public String toString()
   {
      return StringUtils.valueIfNotNull(m_strLocation) + super.toString();
   }

   /**
    * Get the location in the structure of the application where the error has 
    * occurred.
    * 
    * @return  String
    */
   public String getLocation()
   {
      return  m_strLocation;
   }
   
   /**
    * Get if the exception was already recorded in the data store that captures 
    * the exception that occurred. 
    * 
    * @return boolean
    */
   public boolean isRecorded()
   {
      return m_bRecorded;
   }
   
   /**
    * Set this exception as recorded in the data store that captures 
    * the exception that occurred. 
    * 
    * @param bRecorded - true if the exception has been already recorded in the 
    *                    data store that captures the exception that occurred,
    *                    false otherwise.
    */
   public void setRecorded(
      boolean bRecorded
   )
   {
      m_bRecorded = bRecorded;
   }
}
